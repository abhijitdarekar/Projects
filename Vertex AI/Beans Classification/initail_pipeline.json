{
  "components": {
    "comp-deploy-model": {
      "executorLabel": "exec-deploy-model",
      "inputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "project": {
            "parameterType": "STRING"
          },
          "region": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "vertex_endpoint": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "vertex_model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-get-dataframe-func": {
      "executorLabel": "exec-get-dataframe-func",
      "inputDefinitions": {
        "parameters": {
          "bq_table": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "output_data_path": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-sklearn-train": {
      "executorLabel": "exec-sklearn-train",
      "inputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "metrics": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    }
  },
  "defaultPipelineRoot": "gs://absolute-water-398310-2//pipeline/root",
  "deploymentSpec": {
    "executors": {
      "exec-deploy-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "deploy_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'kfp==2.0.1' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef deploy_model(\n    model: Input[Model],\n    project:str,\n    region: str,\n    vertex_endpoint : Output[Artifact],\n    vertex_model : Output[Model]\n):\n    from goole.cloud import aiplatform\n    aiplatform.init(project = project, location = region)\n\n    deployed_model = aiplatform.Model.upload(\n        artifact_uri = model.uri.replace(\"model\",\"\"),\n        display_name = 'beans_model_pipeline',\n        serving_container_image_uri = 'us-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.0-24:latest',\n    )\n    endpoint = deployed_model.deploy(machine_type=\"n1-standard-4\")\n\n    vertex_endpoint.uri = endpoint.resource_name\n    vertex_model.uri  = deployed_model.resource_name\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-get-dataframe-func": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "get_dataframe_func"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery' 'pandas' 'pyarrow' 'db-dtypes' 'packaging' 'google-resumable-media' 'kfp==2.0.1' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef get_dataframe_func(\n    bq_table: str,\n    output_data_path: OutputPath(\"Dataset\"),\n\n):\n    from google.cloud import bigquery\n    import pandas as pd\n    import os\n\n    project_number = os.environ[\"CLOUD_ML_PROJECT_ID\"]\n    bqclient = bigquery.Client(project=project_number)\n    table = bigquery.TableReference.from_string(\n        bq_table\n    )\n    rows = bqclient.list_rows(\n        table\n    )\n    dataframe = rows.to_dataframe(\n        create_bqstorage_client=True,\n    )\n    dataframe = dataframe.sample(frac=1, random_state=2)\n    dataframe.to_csv(output_data_path)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-sklearn-train": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "sklearn_train"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'sklearn' 'pandas' 'joblib' 'db-dtypes' 'kfp==2.0.1' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef sklearn_train(\n    dataset : Input[Dataset],\n    metrics: Output[Metrics],\n    model : Output[Model]\n):\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.metrics import roc_curve\n    from sklearn.model_selection import train_test_split\n    from joblib import dump\n\n    import pandas as pd\n\n    df = pd.read_csv(dataset.path)\n    labels = df.pop(\"Class\").tolist()\n    data = df.values.tolist()\n\n    X_train, X_test, y_train, y_test = train_test_split(data, labels)\n\n    skmodel = DecisionTreeClassifier()\n    skmodel.fit(X_train, X_test)\n    score  = skmodel.score(X_test, y_test)\n    print('accuracy is :', score)\n\n    metrics.log_metric(\"accuracy\",(score * 100.0))\n    metrics.log_metric(\"framework\", \"Scikit Learn\")\n    metrics.log_metric(\"dataset_size\", len(df))\n    dump(skmodel, model.path + \".joblib\")\n\n"
          ],
          "image": "python:3.9"
        }
      }
    }
  },
  "pipelineInfo": {
    "displayName": "mlmd-pipeline",
    "name": "mlmd-pipeline"
  },
  "root": {
    "dag": {
      "outputs": {
        "artifacts": {
          "sklearn-train-metrics": {
            "artifactSelectors": [
              {
                "outputArtifactKey": "metrics",
                "producerSubtask": "sklearn-train"
              }
            ]
          }
        }
      },
      "tasks": {
        "deploy-model": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-deploy-model"
          },
          "dependentTasks": [
            "sklearn-train"
          ],
          "inputs": {
            "artifacts": {
              "model": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "model",
                  "producerTask": "sklearn-train"
                }
              }
            },
            "parameters": {
              "project": {
                "componentInputParameter": "project"
              },
              "region": {
                "componentInputParameter": "region"
              }
            }
          },
          "taskInfo": {
            "name": "deploy-model"
          }
        },
        "get-dataframe-func": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-get-dataframe-func"
          },
          "inputs": {
            "parameters": {
              "bq_table": {
                "runtimeValue": {
                  "constant": ""
                }
              }
            }
          },
          "taskInfo": {
            "name": "get-dataframe-func"
          }
        },
        "sklearn-train": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-sklearn-train"
          },
          "dependentTasks": [
            "get-dataframe-func"
          ],
          "inputs": {
            "artifacts": {
              "dataset": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "output_data_path",
                  "producerTask": "get-dataframe-func"
                }
              }
            }
          },
          "taskInfo": {
            "name": "sklearn-train"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "bq_table": {
          "defaultValue": "",
          "isOptional": true,
          "parameterType": "STRING"
        },
        "output_data_path": {
          "defaultValue": "data.csv",
          "isOptional": true,
          "parameterType": "STRING"
        },
        "project": {
          "defaultValue": "absolute-water-398310",
          "isOptional": true,
          "parameterType": "STRING"
        },
        "region": {
          "defaultValue": "US-central1",
          "isOptional": true,
          "parameterType": "STRING"
        }
      }
    },
    "outputDefinitions": {
      "artifacts": {
        "sklearn-train-metrics": {
          "artifactType": {
            "schemaTitle": "system.Metrics",
            "schemaVersion": "0.0.1"
          }
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.0.1"
}